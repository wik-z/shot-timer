{"version":3,"sources":["contexts/AppContext.js","services/MicrophoneService.js","components/VolumeDisplay.js","components/InputDeviceSelector.js","components/stages/Stage.js","components/stages/Privileges.js","components/EqualizerDisplay.js","components/stages/Calibration.js","components/Router.js","components/App.js","serviceWorker.js","index.js"],"names":["stages","STAGE_PRIVILEGES","STAGE_CALIBRATION","STAGE_TIMER","AppContext","createContext","stage","changeStage","state","Controller","props","bind","this","setState","Provider","value","children","React","Component","audioContext","inputDevice","listeners","error","type","data","forEach","listener","callback","push","index","findIndex","splice","AudioContext","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Error","Promise","resolve","reject","mediaDevices","enumerateDevices","then","devices","filter","d","kind","catch","deviceId","userMediaOptions","audio","stream","initialiseMicrophoneServices","e","microphone","createMediaStreamSource","meter","createAudioMeter","connect","clipLevel","averaging","clipLag","processor","createScriptProcessor","onaudioprocess","volumeAudioProcess","onAudioProcess","clipping","lastClip","volume","destination","checkClipping","window","performance","now","shutdown","disconnect","event","emit","x","buf","inputBuffer","getChannelData","bufLength","length","sum","i","Math","abs","rms","sqrt","max","volumePercentage","min","round","VolumeDisplay","peak","threshold","className","style","width","InputDeviceSelector","availableDevices","MicrophoneService","getAvailableInputDevices","onChange","map","device","key","label","Stage","id","Privileges","goodToProceed","clickedStart","selectedDevice","handleVolumeChange","console","init","log","selectDevice","on","listen","removeListener","target","onClick","handleProceed","handleClickedStart","handleDeviceChange","EqualizerDisplay","values","height","modes","NEW_PROFILE","SELECT_PROFILES","captureModes","STANDBY","LISTENING","Calibration","profiles","selectedProfiles","mode","captureMode","recentCapturedSample","handleThresholdChange","handleAudioProcess","loadCalibrationData","initMicrophoneService","storedConfig","localStorage","getItem","JSON","parse","removeItem","read","Array","from","frequencies","reduce","a","b","step","slice","placeholder","handleNewProfileSubmit","stageMap","Router","Consumer","context","createElement","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71d52b0c.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\n\r\nexport const stages = {\r\n    STAGE_PRIVILEGES: 'privileges',\r\n    STAGE_CALIBRATION: 'calibration',\r\n    STAGE_TIMER: 'timer'\r\n};\r\n\r\nconst AppContext = createContext({\r\n    stage: stages.STAGE_PRIVILEGES,\r\n    changeStage: (state) => {} \r\n});\r\n\r\n\r\nclass Controller extends React.Component {\r\n    state = {\r\n        stage: stages.STAGE_PRIVILEGES,\r\n        changeStage: this.changeStage\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state.changeStage = this.changeStage.bind(this);\r\n    }\r\n\r\n    changeStage(stage) {\r\n        this.setState({\r\n            stage\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <AppContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </AppContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nAppContext.Controller = Controller;\r\n\r\nexport default AppContext;","class MicrophoneService {\r\n    audioContext = null;\r\n    inputDevice = null;\r\n\r\n    listeners = {};\r\n    \r\n    error = false;\r\n\r\n    /**\r\n     * Emits an event to all listeners\r\n     * @param {string} type \r\n     * @param {*} data \r\n     */\r\n    emit(type, data = null) {\r\n        if (!this.listeners[type]) {\r\n            return;\r\n        }\r\n\r\n        this.listeners[type].forEach(listener => {\r\n            if (typeof listener !== 'function') {\r\n                return;\r\n            }\r\n\r\n            listener(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new event listener\r\n     * @param {string} type \r\n     * @param {function} callback \r\n     */\r\n    on(type, callback) {\r\n        if (!this.listeners[type]) {\r\n            this.listeners[type] = [];\r\n        }\r\n\r\n        this.listeners[type].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener\r\n     * @param {string} type \r\n     * @param {function} callback \r\n     */\r\n    removeListener(type, callback) {\r\n        if (!this.listeners[type]) {\r\n            return;\r\n        }\r\n\r\n        const index = this.listeners[type].findIndex(listener => listener === callback);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this.listeners[type].splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Prepares the service APIs to use\r\n     */\r\n    init() {\r\n        this.audioContext = new AudioContext();\r\n\r\n        navigator.getUserMedia = navigator.getUserMedia\r\n            || navigator.webkitGetUserMedia\r\n            || navigator.mozGetUserMedia\r\n            || navigator.msGetUserMedia;\r\n\r\n        if (!navigator.getUserMedia) {\r\n            this.error = true;\r\n            throw new Error('UserMedia API not available!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a list of available input devices\r\n     * @returns {Promise<array>}\r\n     */\r\n    getAvailableInputDevices() {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then((devices) => {\r\n                    resolve(devices.filter((d) => d.kind === 'audioinput'))\r\n                })\r\n                .catch(reject)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Selects a device to listen\r\n     * @param {string} deviceId \r\n     */\r\n    selectDevice(deviceId) {\r\n        this.inputDevice = deviceId;\r\n    }\r\n\r\n    /**\r\n     * Initialises the listening cycle for microphone\r\n     */\r\n    listen() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.inputDevice) {\r\n                reject('No device selected!');\r\n            }\r\n    \r\n            const userMediaOptions = {\r\n                audio: {\r\n                    deviceId: this.inputDevice\r\n                }\r\n            }\r\n    \r\n            navigator.getUserMedia(\r\n                userMediaOptions,\r\n                (stream) => {\r\n                    this.initialiseMicrophoneServices(stream);\r\n                    resolve();\r\n                },\r\n                (e) => {\r\n                    reject(e);\r\n                }\r\n            );\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initialises microphone processors \r\n     * @param {*} stream \r\n     */\r\n    initialiseMicrophoneServices(stream) {\r\n        const microphone = this.audioContext.createMediaStreamSource(stream);\r\n\r\n        const meter = this.createAudioMeter(this.audioContext);\r\n        microphone.connect(meter);\r\n    }\r\n\r\n    /**\r\n     * Creates audio processor and initialises callbacks\r\n     * @param {AudioContext} audioContext \r\n     * @param {number} clipLevel \r\n     * @param {number} averaging \r\n     * @param {number} clipLag \r\n     */\r\n    createAudioMeter(audioContext, clipLevel = 0.98, averaging = 0.95, clipLag = 750) {\r\n        const processor = audioContext.createScriptProcessor(512);\r\n        processor.onaudioprocess = (e) => {\r\n            // volume audio process updates listening parameters\r\n            this.volumeAudioProcess(e, processor);\r\n            this.onAudioProcess(e, processor);\r\n        };\r\n\r\n        processor.clipping = false;\r\n        processor.lastClip = 0;\r\n        processor.volume = 0;\r\n        processor.clipLevel = clipLevel;\r\n        processor.averaging = averaging;\r\n        processor.clipLag = clipLag;\r\n\r\n        // this will have no effect, since we don't copy the input to the output,\r\n        // but works around a current Chrome bug.\r\n        processor.connect(audioContext.destination);\r\n\r\n        processor.checkClipping = function () {\r\n            if (!this.clipping) {\r\n                return false;\r\n            }\r\n\r\n            if ((this.lastClip + this.clipLag) < window.performance.now()) {\r\n                this.clipping = false;\r\n            }\r\n\r\n            return this.clipping;\r\n        };\r\n\r\n        processor.shutdown = function () {\r\n            this.disconnect();\r\n            this.onaudioprocess = null;\r\n        };\r\n\r\n        return processor;\r\n    }\r\n\r\n    /**\r\n     * Audio processing handle\r\n     * @param {AudioProcessingEvent} event \r\n     * @param {ScriptProcessorNode} processor \r\n     */\r\n    onAudioProcess(event, processor) {\r\n        this.emit('audio-process', { event, processor })\r\n    }\r\n\r\n    /**\r\n     * Volume Audio Processor - calculates microphone volume\r\n     * Only Audio Processor that is actually required to run\r\n     * @param {AudioProcessingEvent} event \r\n     * @param {ScriptProcessorNode} processor \r\n     */\r\n    volumeAudioProcess(event, processor) {\r\n        let buf = event.inputBuffer.getChannelData(0);\r\n        let bufLength = buf.length;\r\n        let sum = 0;\r\n        let x;\r\n\r\n        // Do a root-mean-square on the samples: sum up the squares...\r\n        for (let i = 0; i < bufLength; i++) {\r\n            x = buf[i];\r\n            if (Math.abs(x) >= processor.clipLevel) {\r\n                processor.clipping = true;\r\n                processor.lastClip = window.performance.now();\r\n            }\r\n\r\n            sum += x * x;\r\n        }\r\n\r\n        // ... then take the square root of the sum.\r\n        var rms = Math.sqrt(sum / bufLength);\r\n\r\n        // Now smooth this out with the averaging factor applied\r\n        // to the previous sample - take the max here because we\r\n        // want \"fast attack, slow release.\"\r\n        const volume = Math.max(rms, processor.volume * processor.averaging);\r\n\r\n        if (processor.volume !== volume) {\r\n            processor.volume = volume;\r\n            const volumePercentage = Math.min(Math.round(100 * volume), 100)\r\n\r\n            if (volumePercentage !== this.volume) {\r\n                this.volume = volumePercentage;\r\n    \r\n                this.emit('volume-change', this.volume);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new MicrophoneService();","import React from 'react';\r\nimport './VolumeDisplay.css';\r\n\r\nfunction VolumeDisplay({ volume, peak, threshold }) {\r\n    return (\r\n        <div className=\"volume-display\">\r\n            <div className=\"bar\" style={{ width: `${volume}%`}} />\r\n            {peak && <div className=\"peak-indicator\" />}\r\n            {threshold && <div className=\"threshold-indicator\" style={{ width: `${threshold}%`}} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VolumeDisplay;","import React from 'react';\r\nimport MicrophoneService from '../services/MicrophoneService';\r\n\r\nclass InputDeviceSelector extends React.Component {\r\n    state = {\r\n        availableDevices: [],\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const availableDevices = await MicrophoneService.getAvailableInputDevices();\r\n\r\n        this.setState({\r\n            availableDevices\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select value={this.props.value} onChange={this.props.onChange}>\r\n                <option value={null}>Select...</option>\r\n                {this.state.availableDevices.map((device, index) => {\r\n                    return <option \r\n                        value={device.deviceId}\r\n                        key={device.deviceId}\r\n                    >{device.label || `Unknown device #${index + 1}`}</option>\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputDeviceSelector;","import React from 'react';\r\nimport './Stage.css';\r\n\r\nfunction Stage({ children, id }) {\r\n    return (\r\n        <div className=\"stage-wrapper\" id={`stage-${id}`}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stage;","import React from 'react';\r\nimport MicrophoneService from '../../services/MicrophoneService';\r\nimport VolumeDisplay from '../VolumeDisplay';\r\nimport InputDeviceSelector from '../InputDeviceSelector';\r\nimport { stages } from '../../contexts/AppContext';\r\nimport Stage from './Stage';\r\n\r\nimport './Privileges.css';\r\n\r\nclass Privileges extends React.Component {\r\n    state = {\r\n        error: false,\r\n        goodToProceed: false,\r\n        clickedStart: false,\r\n        selectedDevice: '',\r\n        volume: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        if (MicrophoneService.error) {\r\n            console.error('MicrophoneService failed to load');\r\n\r\n            this.setState({\r\n                error: true\r\n            });\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        try {\r\n            MicrophoneService.init();\r\n\r\n            const devices = await MicrophoneService.getAvailableInputDevices();\r\n    \r\n            if (!devices || !devices.length) {\r\n                console.log('No devices found!');\r\n\r\n                return this.setState({\r\n                    error: true\r\n                });\r\n            }\r\n    \r\n            MicrophoneService.selectDevice(this.state.selectedDevice);\r\n            MicrophoneService.on('volume-change', this.handleVolumeChange);\r\n            \r\n            await MicrophoneService.listen();\r\n\r\n            this.setState({\r\n                goodToProceed: true\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n\r\n            this.setState({\r\n                error: true\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MicrophoneService.removeListener('volume-change', this.handleVolumeChange);\r\n    }\r\n\r\n    handleVolumeChange(volume) {\r\n        this.setState({\r\n            volume\r\n        });\r\n    }\r\n\r\n    handleClickedStart() {\r\n        this.setState({\r\n            clickedStart: true\r\n        });\r\n\r\n        this.init();\r\n    }\r\n\r\n    handleProceed() {\r\n        this.props.changeStage(stages.STAGE_CALIBRATION);\r\n    }\r\n\r\n    handleDeviceChange(e) {\r\n        const value = e.target.value;\r\n\r\n        this.setState({\r\n            selectedDevice: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage id=\"privileges\">\r\n                {this.state.error ? (\r\n                    <div className=\"error\">\r\n                        <p>An error occured.</p> \r\n                        <p>Looks like your browser doesn't support our core features (or you didn't grant us access).</p>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        {this.state.goodToProceed ? (\r\n                            <div className=\"current-read\">\r\n                                <h2>Current microphone read:</h2>\r\n                                <VolumeDisplay volume={this.state.volume} />\r\n                                <h4>All good?</h4>\r\n                                <p>\r\n                                    (If not, it might be worth reloading the page and picking a different device)\r\n                                </p>\r\n                                <button \r\n                                    onClick={this.handleProceed.bind(this)}\r\n                                    className=\"btn\"\r\n                                >PROCEED</button>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"access-request\">\r\n                                {this.state.clickedStart ? (\r\n                                    <>\r\n                                        <p>Waiting for access to microphone...</p>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n\r\n                                        <h4>\r\n                                            We need access to your microphone <i>(duh...)</i>\r\n                                        </h4>\r\n                                        {this.state.selectedDevice ? (\r\n                                            <>\r\n                                                <p>Now click the button below to start.</p>\r\n                                                <p>\r\n                                                    <button\r\n                                                        onClick={this.handleClickedStart.bind(this)}\r\n                                                        className=\"btn\"    \r\n                                                    >\r\n                                                        START\r\n                                                    </button>\r\n                                                </p>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <p>First, please select the microphone you'd like to use:</p>\r\n                                                <InputDeviceSelector\r\n                                                    value={this.state.selectedDevice}\r\n                                                    onChange={this.handleDeviceChange.bind(this)}\r\n                                                />\r\n                                            </>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </Stage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Privileges;","import React from 'react';\r\nimport './EqualizerDisplay.css';\r\n\r\nfunction EqualizerDisplay({ values }) {\r\n    return (\r\n        <div className=\"equalizer-display\">\r\n            {values.map(value => {\r\n                return <div className=\"inner\" style={{ height: `${Math.round(100 - (value * 100))}px`}} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EqualizerDisplay;","import React from 'react';\r\nimport Stage from './Stage';\r\nimport VolumeDisplay from '../VolumeDisplay';\r\nimport EqualizerDisplay from '../EqualizerDisplay';\r\nimport MicrophoneService from '../../services/MicrophoneService';\r\nimport './Calibration.css';\r\n\r\nconst modes = {\r\n    NEW_PROFILE: 'new-profile',\r\n    SELECT_PROFILES: 'select-profiles'\r\n}\r\n\r\nconst captureModes = {\r\n    STANDBY: 'standby',\r\n    LISTENING: 'listening'\r\n}\r\n\r\nclass Calibration extends React.Component {\r\n    state = {\r\n        volume: MicrophoneService.volume,\r\n        threshold: 45,\r\n        profiles: [],\r\n        selectedProfiles: [],\r\n        mode: modes.NEW_PROFILE,\r\n        captureMode: captureModes.STANDBY,\r\n        recentCapturedSample: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n        this.handleThresholdChange = this.handleThresholdChange.bind(this);\r\n        this.handleAudioProcess = this.handleAudioProcess.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadCalibrationData();\r\n        this.initMicrophoneService();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MicrophoneService.removeListener('volume-change', this.handleVolumeChange);\r\n        MicrophoneService.removeListener('audio-process', this.handleAudioProcess);\r\n    }\r\n\r\n    initMicrophoneService() {\r\n        MicrophoneService.on('volume-change', this.handleVolumeChange);\r\n        MicrophoneService.on('audio-process', this.handleAudioProcess);\r\n    }\r\n\r\n    loadCalibrationData() {\r\n        let storedConfig = localStorage.getItem('calibration');\r\n        \r\n        if (!storedConfig) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            storedConfig = JSON.parse(storedConfig);\r\n        } catch (e) {\r\n            console.error(e);\r\n            localStorage.removeItem('calibration');\r\n            return;\r\n        }\r\n\r\n        if (storedConfig.profiles && storedConfig.profiles.length) {\r\n            this.setState({\r\n                mode: modes.SELECT_PROFILES,\r\n                profiles: storedConfig.profiles,\r\n                threshold: storedConfig.threshold || this.state.threshold\r\n            });\r\n        }\r\n    }\r\n\r\n    handleVolumeChange(volume) {\r\n        this.setState({\r\n            volume \r\n        });\r\n    }\r\n\r\n    handleAudioProcess({ event, processor }) {\r\n        if (this.state.mode !== modes.NEW_PROFILE) {\r\n            return;\r\n        }\r\n\r\n        if (MicrophoneService.volume >= this.state.threshold) {\r\n            console.log('ABOVE THRESHOLD');\r\n\r\n            if (this.state.captureMode === captureModes.STANDBY) {\r\n                const read = Array.from(event.inputBuffer.getChannelData(0));\r\n\r\n                console.log('UPDATING SAMPLE');\r\n\r\n                this.setState({\r\n                    captureMode: captureModes.LISTENING,\r\n                    recentCapturedSample: read\r\n                });\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.state.captureMode === captureModes.LISTENING) {\r\n            this.setState({\r\n                captureMode: captureModes.STANDBY,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleThresholdChange(e) {\r\n        this.setState({\r\n            threshold: e.target.value\r\n        });\r\n    }\r\n\r\n    handleNewProfileSubmit() {\r\n        // for now: let's see the most active frequencies\r\n        const frequencies = this.state.recentCapturedSample\r\n            .reduce((a, b, i) => {\r\n                if (b > 0.4) {\r\n                    return [...a, i];\r\n                }\r\n\r\n                return a;\r\n            }, []);\r\n\r\n        console.log(frequencies);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage id=\"calibration\">\r\n                {this.state.mode === modes.NEW_PROFILE ? (\r\n                    <>\r\n                        <h2>\r\n                            Let's create {this.state.profiles.length ? 'another' : 'your first'} profile\r\n                        </h2>\r\n                        <p>\r\n                            <strong>Profile</strong> is basically a set of information I collect about the sound of your firearm<br/>\r\n                            so that we can identify it better (otherwise I'll just pick up background noise as shots). \r\n                        </p>\r\n                        <p>\r\n                            I really think you should create <strong>1 profile per every gun you use</strong> in your excercises,<br />\r\n                            although I can't promise I will always differentiate between them correctly.\r\n                        </p>\r\n                        <h3>First, let's adjust the volume threshold</h3>\r\n                        <p>Try placing a few shots and adjusting the value below to make sure I pick up shots only.</p>\r\n                        <p>Also, for best results, keep your phone exactly where you'll have it during shooting.</p>\r\n                        <div className=\"threshold-regulation\">\r\n                            <div className=\"threshold-range-input\">\r\n                                <input \r\n                                    type=\"range\" \r\n                                    min=\"0\"\r\n                                    max=\"100\"\r\n                                    step=\"1\"\r\n                                    value={this.state.threshold} \r\n                                    onChange={this.handleThresholdChange}\r\n                                />\r\n                            </div>\r\n                            <VolumeDisplay \r\n                                volume={this.state.volume} \r\n                                threshold={this.state.threshold}\r\n                            />\r\n                        </div>\r\n                        {this.state.recentCapturedSample && (\r\n                            <>\r\n                                <EqualizerDisplay values={this.state.recentCapturedSample.slice(127, 383)} />\r\n                                <p>If it looks right, name this profile and press \"Continue\".</p>\r\n                                <input type=\"text\" placeholder=\"Profile name...\" /><br />\r\n                                <button className=\"btn\" onClick={this.handleNewProfileSubmit.bind(this)}>CONTINUE</button>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                ) : (\r\n                    <>\r\n\r\n                    </>\r\n                )}\r\n            </Stage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calibration;","import React from 'react';\r\nimport AppContext, { stages } from '../contexts/AppContext';\r\nimport Privileges from './stages/Privileges';\r\nimport Calibration from './stages/Calibration';\r\n\r\nconst stageMap = {\r\n    [stages.STAGE_CALIBRATION]: Calibration,\r\n    [stages.STAGE_PRIVILEGES]: Privileges\r\n}\r\n\r\nclass Router extends React.Component {\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {(context) => React.createElement(stageMap[context.stage], context)}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport './App.css';\nimport AppContext from '../contexts/AppContext';\nimport Router from './Router';\n\n/**\n * To-do notes\n * Threshold-only approach is not enough to ensure correct values\n * there still is a high probability it will take a completely different sound as a sample\n * Threshold + spectrum comparison is a much better approach\n */\nclass App extends React.Component {\n  render() {\n    return (\n      <AppContext.Controller>\n        <div className=\"App\">\n          <div id=\"main\">\n            <Router />\n          </div>\n        </div>\n      </AppContext.Controller>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}