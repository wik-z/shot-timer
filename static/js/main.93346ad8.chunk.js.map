{"version":3,"sources":["contexts/AppContext.js","services/MicrophoneService.js","components/VolumeDisplay.js","components/InputDeviceSelector.js","components/stages/Stage.js","components/stages/Privileges.js","components/stages/Calibration.js","components/stages/Timer/TimerDisplay.js","components/stages/Timer/TimerButtons.js","services/Beeper.js","components/stages/Timer/TimerShotsList.js","components/stages/Timer.js","components/Router.js","components/App.js","serviceWorker.js","index.js"],"names":["stages","STAGE_PRIVILEGES","STAGE_CALIBRATION","STAGE_TIMER","AppContext","createContext","stage","changeStage","state","threshold","changeThreshold","Controller","props","bind","this","setState","Provider","value","children","React","Component","audioContext","inputDevice","listeners","error","volume","type","data","forEach","listener","callback","push","index","findIndex","splice","AudioContext","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Error","Promise","resolve","reject","mediaDevices","enumerateDevices","then","devices","filter","d","kind","catch","deviceId","userMediaOptions","audio","stream","initialiseMicrophoneServices","e","microphone","createMediaStreamSource","meter","createAudioMeter","connect","clipLevel","averaging","clipLag","processor","createScriptProcessor","onaudioprocess","volumeAudioProcess","onAudioProcess","clipping","lastClip","destination","checkClipping","window","performance","now","shutdown","disconnect","event","emit","x","buf","inputBuffer","getChannelData","bufLength","length","sum","i","Math","abs","rms","sqrt","max","volumePercentage","min","round","VolumeDisplay","peak","className","style","width","InputDeviceSelector","availableDevices","MicrophoneService","getAvailableInputDevices","onChange","map","device","key","label","Stage","id","Privileges","goodToProceed","clickedStart","selectedDevice","handleVolumeChange","console","init","log","selectDevice","on","listen","removeListener","target","onClick","handleProceed","handleClickedStart","handleDeviceChange","captureModes","STANDBY","LISTENING","Calibration","captureMode","recentCapturedSample","handleThresholdChange","handleAudioProcess","initMicrophoneService","read","Array","from","context","step","handleSubmit","contextType","TimerDisplay","toFloat","twoLast","parseFloat","floor","toFixed","mainPart","String","padStart","substr","formatNumber","TimerButtons","mode","modes","onStartButtonClick","onStopButtonClick","OFF","disabled","ON","Beeper","oscillator","states","BEEPER_STANDBY","frequency","duration","prepareOscillator","createOscillator","BEEPER_PLAYING","start","setTimeout","stop","TimerShotsList","startTimestamp","shots","shot","Timer","beeper","handleStartButton","handleStopButton","startExcercise","Date","getTime","play","getLastShotDelta","stageMap","Router","Consumer","createElement","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gaAEaA,EAAS,CAClBC,iBAAkB,aAClBC,kBAAmB,cACnBC,YAAa,SAGXC,EAAaC,wBAAc,CAC7BC,MAAON,EAAOC,iBACdM,YAAa,SAACC,KACdC,UAAW,GACXC,gBAAiB,SAACF,OAIhBG,E,YAQF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KARVJ,MAAQ,CACJF,MAAON,EAAOC,iBACdM,YAAa,EAAKA,YAClBE,UAAW,GACXC,gBAAiB,EAAKA,iBAMtB,EAAKF,MAAMD,YAAc,EAAKA,YAAYM,KAAjB,gBACzB,EAAKL,MAAME,gBAAkB,EAAKA,gBAAgBG,KAArB,gBAJd,E,yEAOPP,GACRQ,KAAKC,SAAS,CACVT,Y,sCAIQG,GACZK,KAAKC,SAAS,CACVN,gB,+BAKJ,OACI,kBAACL,EAAWY,SAAZ,CAAqBC,MAAOH,KAAKN,OAC5BM,KAAKF,MAAMM,c,GA9BHC,IAAMC,WAoC/BhB,EAAWO,WAAaA,EAETP,Q,uBCyLA,M,iDA9OXiB,aAAe,K,KACfC,YAAc,K,KAEdC,UAAY,G,KAEZC,OAAQ,E,KAERC,OAAS,E,iDAOJC,GAAoB,IAAdC,EAAa,uDAAN,KACTb,KAAKS,UAAUG,IAIpBZ,KAAKS,UAAUG,GAAME,QAAQ,SAAAC,GACD,oBAAbA,GAIXA,EAASF,O,yBASdD,EAAMI,GACAhB,KAAKS,UAAUG,KAChBZ,KAAKS,UAAUG,GAAQ,IAG3BZ,KAAKS,UAAUG,GAAMK,KAAKD,K,qCAQfJ,EAAMI,GACjB,GAAKhB,KAAKS,UAAUG,GAApB,CAIA,IAAMM,EAAQlB,KAAKS,UAAUG,GAAMO,UAAU,SAAAJ,GAAQ,OAAIA,IAAaC,KAEvD,IAAXE,GAIJlB,KAAKS,UAAUG,GAAMQ,OAAOF,EAAO,M,6BAcnC,GAPAlB,KAAKO,aAAe,IAAIc,aAExBC,UAAUC,aAAeD,UAAUC,cAC5BD,UAAUE,oBACVF,UAAUG,iBACVH,UAAUI,gBAEZJ,UAAUC,aAEX,MADAvB,KAAKU,OAAQ,EACP,IAAIiB,MAAM,kC,iDASpB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACzBR,UAAUS,aAAaC,mBAClBC,KAAK,SAACC,GACHL,EAAQK,EAAQC,OAAO,SAACC,GAAD,MAAkB,eAAXA,EAAEC,UAEnCC,MAAMR,O,mCAQNS,GACTvC,KAAKQ,YAAc+B,I,+BAMb,IAAD,OACL,OAAO,IAAIX,QAAQ,SAACC,EAASC,GACpB,EAAKtB,aACNsB,EAAO,uBAGX,IAAMU,EAAmB,CACrBC,MAAO,CACHF,SAAU,EAAK/B,cAIvBc,UAAUC,aACNiB,EACA,SAACE,GACG,EAAKC,6BAA6BD,GAClCb,KAEJ,SAACe,GACGd,EAAOc,S,mDAWMF,GACzB,IAAMG,EAAa7C,KAAKO,aAAauC,wBAAwBJ,GAEvDK,EAAQ/C,KAAKgD,iBAAiBhD,KAAKO,cACzCsC,EAAWI,QAAQF,K,uCAUNxC,GAAkE,IAAD,OAAnD2C,EAAmD,uDAAvC,IAAMC,EAAiC,uDAArB,IAAMC,EAAe,uDAAL,IACnEC,EAAY9C,EAAa+C,sBAAsB,KAmCrD,OAlCAD,EAAUE,eAAiB,SAACX,GAExB,EAAKY,mBAAmBZ,EAAGS,GAC3B,EAAKI,eAAeb,EAAGS,IAG3BA,EAAUK,UAAW,EACrBL,EAAUM,SAAW,EACrBN,EAAU1C,OAAS,EACnB0C,EAAUH,UAAYA,EACtBG,EAAUF,UAAYA,EACtBE,EAAUD,QAAUA,EAIpBC,EAAUJ,QAAQ1C,EAAaqD,aAE/BP,EAAUQ,cAAgB,WACtB,QAAK7D,KAAK0D,WAIL1D,KAAK2D,SAAW3D,KAAKoD,QAAWU,OAAOC,YAAYC,QACpDhE,KAAK0D,UAAW,GAGb1D,KAAK0D,WAGhBL,EAAUY,SAAW,WACjBjE,KAAKkE,aACLlE,KAAKuD,eAAiB,MAGnBF,I,qCAQIc,EAAOd,GAClBrD,KAAKoE,KAAK,gBAAiB,CAAED,QAAOd,gB,yCASrBc,EAAOd,GAOtB,IANA,IAGIgB,EAHAC,EAAMH,EAAMI,YAAYC,eAAe,GACvCC,EAAYH,EAAII,OAChBC,EAAM,EAIDC,EAAI,EAAGA,EAAIH,EAAWG,IAC3BP,EAAIC,EAAIM,GACJC,KAAKC,IAAIT,IAAMhB,EAAUH,YACzBG,EAAUK,UAAW,EACrBL,EAAUM,SAAWG,OAAOC,YAAYC,OAG5CW,GAAON,EAAIA,EAIf,IAAIU,EAAMF,KAAKG,KAAKL,EAAMF,GAKpB9D,EAASkE,KAAKI,IAAIF,EAAK1B,EAAU1C,OAAS0C,EAAUF,WAE1D,GAAIE,EAAU1C,SAAWA,EAAQ,CAC7B0C,EAAU1C,OAASA,EACnB,IAAMuE,EAAmBL,KAAKM,IAAIN,KAAKO,MAAM,IAAMzE,GAAS,KAExDuE,IAAqBlF,KAAKW,SAC1BX,KAAKW,OAASuE,EAEdlF,KAAKoE,KAAK,gBAAiBpE,KAAKW,c,YC5NjC0E,MAVf,YAAqD,IAA5B1E,EAA2B,EAA3BA,OAAQ2E,EAAmB,EAAnBA,KAAM3F,EAAa,EAAbA,UACnC,OACI,yBAAK4F,UAAU,kBACX,yBAAKA,UAAU,MAAMC,MAAO,CAAEC,MAAM,GAAD,OAAK9E,EAAL,QAClC2E,GAAQ,yBAAKC,UAAU,mBACvB5F,GAAa,yBAAK4F,UAAU,sBAAsBC,MAAO,CAAEC,MAAM,GAAD,OAAK9F,EAAL,UCuB9D+F,E,2MA3BXhG,MAAQ,CACJiG,iBAAkB,I,iNAIaC,EAAkBC,2B,OAA3CF,E,OAEN3F,KAAKC,SAAS,CACV0F,qB,mIAKJ,OACI,4BAAQxF,MAAOH,KAAKF,MAAMK,MAAO2F,SAAU9F,KAAKF,MAAMgG,UAClD,4BAAQ3F,MAAO,MAAf,aACCH,KAAKN,MAAMiG,iBAAiBI,IAAI,SAACC,EAAQ9E,GACtC,OAAO,4BACHf,MAAO6F,EAAOzD,SACd0D,IAAKD,EAAOzD,UACdyD,EAAOE,OAAP,0BAAmChF,EAAQ,W,GArB/Bb,IAAMC,W,MCUzB6F,MAVf,YAAkC,IAAjB/F,EAAgB,EAAhBA,SAAUgG,EAAM,EAANA,GACvB,OACI,yBAAKb,UAAU,gBAAgBa,GAAE,gBAAWA,IACxC,yBAAKb,UAAU,eACVnF,KC2JFiG,G,kBAhJX,WAAYvG,GAAQ,IAAD,8BACf,4CAAMA,KATVJ,MAAQ,CACJgB,OAAO,EACP4F,eAAe,EACfC,cAAc,EACdC,eAAgB,GAChB7F,OAAQ,GAMR,EAAK8F,mBAAqB,EAAKA,mBAAmB1G,KAAxB,gBAHX,E,yLAOX6F,EAAkBlF,QAClBgG,QAAQhG,MAAM,oCAEdV,KAAKC,SAAS,CACVS,OAAO,K,+PAOXkF,EAAkBe,O,SAEIf,EAAkBC,2B,WAAlC3D,E,SAEWA,EAAQwC,O,uBACrBgC,QAAQE,IAAI,qB,kBAEL5G,KAAKC,SAAS,CACjBS,OAAO,K,cAIfkF,EAAkBiB,aAAa7G,KAAKN,MAAM8G,gBAC1CZ,EAAkBkB,GAAG,gBAAiB9G,KAAKyG,oB,UAErCb,EAAkBmB,S,QAExB/G,KAAKC,SAAS,CACVqG,eAAe,I,kDAGnBI,QAAQE,IAAR,MAEA5G,KAAKC,SAAS,CACVS,OAAO,I,2JAMfkF,EAAkBoB,eAAe,gBAAiBhH,KAAKyG,sB,yCAGxC9F,GACfX,KAAKC,SAAS,CACVU,a,2CAKJX,KAAKC,SAAS,CACVsG,cAAc,IAGlBvG,KAAK2G,S,sCAIL3G,KAAKF,MAAML,YAAYP,EAAOE,qB,yCAGfwD,GACf,IAAMzC,EAAQyC,EAAEqE,OAAO9G,MAEvBH,KAAKC,SAAS,CACVuG,eAAgBrG,M,+BAKpB,OACI,kBAAC,EAAD,CAAOiG,GAAG,cACLpG,KAAKN,MAAMgB,MACR,yBAAK6E,UAAU,SACX,gDACA,0HAGJ,6BACKvF,KAAKN,MAAM4G,cACR,yBAAKf,UAAU,gBACX,wDACA,kBAAC,EAAD,CAAe5E,OAAQX,KAAKN,MAAMiB,SAClC,yCACA,4GAGA,4BACIuG,QAASlH,KAAKmH,cAAcpH,KAAKC,MACjCuF,UAAU,OAFd,YAMJ,yBAAKA,UAAU,kBACVvF,KAAKN,MAAM6G,aACR,oCACI,mEAGJ,oCAEI,iEACsC,wCAErCvG,KAAKN,MAAM8G,eACR,oCACI,mEACA,2BACI,4BACIU,QAASlH,KAAKoH,mBAAmBrH,KAAKC,MACtCuF,UAAU,OAFd,WASR,oCACI,qFACA,kBAAC,EAAD,CACIpF,MAAOH,KAAKN,MAAM8G,eAClBV,SAAU9F,KAAKqH,mBAAmBtH,KAAKC,iB,GA1IlEK,IAAMC,YCDzBgH,G,MAAe,CACjBC,QAAS,UACTC,UAAW,cAGTC,E,YAUF,WAAY3H,GAAQ,IAAD,8BACf,4CAAMA,KARVJ,MAAQ,CACJiB,OAAQiF,EAAkBjF,OAC1BhB,UAAW,GACX+H,YAAaJ,EAAaC,QAC1BI,qBAAsB,MAMtB,EAAKlB,mBAAqB,EAAKA,mBAAmB1G,KAAxB,gBAC1B,EAAK6H,sBAAwB,EAAKA,sBAAsB7H,KAA3B,gBAC7B,EAAK8H,mBAAqB,EAAKA,mBAAmB9H,KAAxB,gBALX,E,iFASfC,KAAK8H,0B,6CAILlC,EAAkBoB,eAAe,gBAAiBhH,KAAKyG,oBACvDb,EAAkBoB,eAAe,gBAAiBhH,KAAK6H,sB,8CAIvDjC,EAAkBkB,GAAG,gBAAiB9G,KAAKyG,oBAC3Cb,EAAkBkB,GAAG,gBAAiB9G,KAAK6H,sB,yCAG5BlH,GACfX,KAAKC,SAAS,CACVU,a,4CAIkC,IAArBwD,EAAoB,EAApBA,MAAoB,EAAbd,UACxB,GAAIuC,EAAkBjF,QAAUX,KAAKN,MAAMC,WACvC,GAAIK,KAAKN,MAAMgI,cAAgBJ,EAAaC,QAAS,CACjD,IAAMQ,EAAOC,MAAMC,KAAK9D,EAAMI,YAAYC,eAAe,IAEzDxE,KAAKC,SAAS,CACVyH,YAAaJ,EAAaE,UAC1BG,qBAAsBI,UAO9B/H,KAAKN,MAAMgI,cAAgBJ,EAAaE,WACxCxH,KAAKC,SAAS,CACVyH,YAAaJ,EAAaC,Y,4CAKhB3E,GAClB5C,KAAKC,SAAS,CACVN,UAAWiD,EAAEqE,OAAO9G,U,qCAMxBH,KAAKkI,QAAQtI,gBAAgBI,KAAKN,MAAMC,WACxCK,KAAKkI,QAAQzI,YAAYP,EAAOG,e,+BAIhC,OACI,kBAAC,EAAD,CAAO+G,GAAG,eACN,0DAGA,+EACA,uHACA,oHACA,yBAAKb,UAAU,wBACX,yBAAKA,UAAU,yBACX,2BACI3E,KAAK,QACLuE,IAAI,IACJF,IAAI,MACJkD,KAAK,IACLhI,MAAOH,KAAKN,MAAMC,UAClBmG,SAAU9F,KAAK4H,yBAGvB,kBAAC,EAAD,CACIjH,OAAQX,KAAKN,MAAMiB,OACnBhB,UAAWK,KAAKN,MAAMC,aAG7BK,KAAKN,MAAMiI,sBACR,oCACI,yFACA,4BAAQpC,UAAU,MAAM2B,QAASlH,KAAKoI,aAAarI,KAAKC,OAAxD,kB,GAnGEK,IAAMC,WAA1BmH,EACKY,YAAc/I,EA0GVmI,Q,oBCnGAa,MAVf,YAAkC,IAAVnI,EAAS,EAATA,MACpB,OACI,yBAAKoF,UAAU,iBACX,8BACKpF,EAZjB,SAAsBA,GAClB,IAAMoI,EAAUpI,EAAQ,IAClBqI,EAAmE,IAAzDC,YAAYF,EAAU1D,KAAK6D,MAAMH,IAAUI,QAAQ,IAC7DC,EAAW/D,KAAK6D,MAAMH,GAE5B,OAAOM,OAAOD,GAAUE,SAAS,EAAG,KAAO,IAAMD,OAAOL,GAASO,OAAO,EAAG,GAOtDC,CAAa7I,GAAS,WCHhC8I,MAVf,YAA+E,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,mBAAoBC,EAAqB,EAArBA,kBACrD,OACI,yBAAK9D,UAAU,iBACV2D,IAASC,EAAMG,KAAO,4BAAQpC,QAASkC,GAAjB,SACtBF,IAASC,EAAM5B,SAAW,4BAAQgC,UAAQ,GAAhB,WAC1BL,IAASC,EAAMK,IAAM,4BAAQtC,QAASmC,GAAjB,UCL5BI,E,WA4BF,aAAe,yBAnBflJ,aAAe,KAmBD,KAfdmJ,WAAa,KAeC,KAVdhK,MAAQ+J,EAAOE,OAAOC,eAUR,KARdC,UAAY,IAQE,KAPdC,SAAW,IAQP9J,KAAKO,aAAe,IAAIc,aAExBrB,KAAK+J,oB,gEAOL/J,KAAK0J,WAAa1J,KAAKO,aAAayJ,mBAEpChK,KAAK0J,WAAW9I,KAAO,SACvBZ,KAAK0J,WAAWG,UAAU1J,MAAQH,KAAK6J,UACvC7J,KAAK0J,WAAWzG,QAAQjD,KAAKO,aAAaqD,e,6BAOtC,IAAD,OACH,OAAO,IAAIhC,QAAQ,SAACC,EAASC,GACrB,EAAKpC,QAAU+J,EAAOE,OAAOM,gBAC7BnI,EAAO,6BAGX,EAAK4H,WAAWQ,QAChB,EAAKxK,MAAQ+J,EAAOE,OAAOM,eAE3BE,WAAW,WACP,EAAKT,WAAWU,OAChBvI,IACA,EAAKnC,MAAQ+J,EAAOE,OAAOC,eAC3B,EAAKG,qBACN,EAAKD,gB,KA/DdL,EACKE,OAAS,CACZC,eAAgB,UAChBK,eAAgB,WAiETR,QCpDAY,MAhBf,YAAoD,IAA1BC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,MACtC,OAAKD,GAAmC,IAAjBC,EAAM7F,OAKzB,yBAAKa,UAAU,oBACX,4BACKgF,EAAMxE,IAAI,SAAAyE,GACP,OAAO,4BAAKA,EAAOF,OAPxB,MCQFnB,EAAQ,CACjBG,IAAK,MACL/B,QAAS,UACTiC,GAAI,MAGFlC,EAAe,CACjBC,QAAS,UACTC,UAAW,aAGTiD,E,YAWF,WAAY3K,GAAQ,IAAD,8BACf,4CAAMA,KATVJ,MAAQ,CACJwJ,KAAMC,EAAMG,IACZ5B,YAAaJ,EAAaC,QAC1BgD,MAAO,IAKQ,EAFnBG,OAAS,IAAIjB,EAKT,EAAKkB,kBAAoB,EAAKA,kBAAkB5K,KAAvB,gBACzB,EAAK6K,iBAAmB,EAAKA,iBAAiB7K,KAAtB,gBACxB,EAAK8K,eAAiB,EAAKA,eAAe9K,KAApB,gBACtB,EAAK0G,mBAAqB,EAAKA,mBAAmB1G,KAAxB,gBANX,E,iFAUfC,KAAK8H,0B,6CAILlC,EAAkBoB,eAAe,gBAAiBhH,KAAKyG,sB,8CAIvDb,EAAkBkB,GAAG,gBAAiB9G,KAAKyG,sB,yCAG5B9F,GACXX,KAAKN,MAAMwJ,OAASC,EAAMK,KAI1B7I,EAASX,KAAKkI,QAAQvI,UAClBK,KAAKN,MAAMgI,cAAgBJ,EAAaE,WACxCxH,KAAKC,SAAS,CACVyH,YAAaJ,EAAaC,UAMlCvH,KAAKN,MAAMgI,cAAgBJ,EAAaC,SACxCvH,KAAKC,SAAS,CACVyH,YAAaJ,EAAaE,UAC1B+C,MAAM,GAAD,mBACEvK,KAAKN,MAAM6K,OADb,EAEA,IAAIO,MAAQC,iB,0CAOzB/K,KAAKC,SAAS,CACViJ,KAAMC,EAAM5B,QACZgD,MAAO,KAGXJ,WAAWnK,KAAK6K,eAAgB,O,uCAGlB,IAAD,OACb7K,KAAK0K,OAAOM,OAGZb,WAAW,WACP,EAAKlK,SAAS,CACViJ,KAAMC,EAAMK,GACZc,gBAAiB,IAAIQ,MAAQC,WAAa,EAAKL,OAAOZ,SAAW,OAEtE9J,KAAK0K,OAAOZ,SAAW,M,yCAI1B9J,KAAKC,SAAS,CACViJ,KAAMC,EAAMG,Q,yCAIA,IAAD,EACmBtJ,KAAKN,MAA/B6K,EADO,EACPA,MAAOD,EADA,EACAA,eAEf,OAAqB,IAAjBC,EAAM7F,QAAiB4F,EAIVC,EAAMA,EAAM7F,OAAS,GAEpB4F,EALP,O,+BASX,OACI,kBAAC,EAAD,CAAOlE,GAAG,SACN,kBAAC,EAAD,CACIjG,MAAOH,KAAKiL,qBAEhB,kBAAC,EAAD,CACIX,eAAgBtK,KAAKN,MAAM4K,eAC3BC,MAAOvK,KAAKN,MAAM6K,QAEtB,kBAAC,EAAD,CACIpB,MAAOA,EACPD,KAAMlJ,KAAKN,MAAMwJ,KACjBE,mBAAoBpJ,KAAK2K,kBACzBtB,kBAAmBrJ,KAAK4K,wB,GA9GxBvK,IAAMC,WAApBmK,EACKpC,YAAc/I,EAoHVmL,I,EAAAA,ICtITS,GAAQ,mBACThM,EAAOE,kBAAoBqI,GADlB,cAETvI,EAAOC,iBAAmBkH,GAFjB,cAGTnH,EAAOG,YAAcoL,GAHZ,GAgBCU,E,iLARP,OACI,kBAAC,EAAWC,SAAZ,KACK,SAAClD,GAAD,OAAa7H,IAAMgL,cAAcH,EAAShD,EAAQ1I,OAAQ0I,S,GAJtD7H,IAAMC,WCOZgL,E,iLAZX,OACI,kBAAC,EAAWzL,WAAZ,KACE,yBAAK0F,UAAU,OACb,yBAAKa,GAAG,QACN,kBAAC,EAAD,a,GANI/F,IAAMC,WCOJiL,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxK,WACrBA,UAAUyK,cAAcC,MAAM/J,KAAK,SAAAgK,GACjCA,EAAaC,iB","file":"static/js/main.93346ad8.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\n\r\nexport const stages = {\r\n    STAGE_PRIVILEGES: 'privileges',\r\n    STAGE_CALIBRATION: 'calibration',\r\n    STAGE_TIMER: 'timer'\r\n};\r\n\r\nconst AppContext = createContext({\r\n    stage: stages.STAGE_PRIVILEGES,\r\n    changeStage: (state) => {},\r\n    threshold: 45,\r\n    changeThreshold: (state) => {} \r\n});\r\n\r\n\r\nclass Controller extends React.Component {\r\n    state = {\r\n        stage: stages.STAGE_PRIVILEGES,\r\n        changeStage: this.changeStage,\r\n        threshold: 45,\r\n        changeThreshold: this.changeThreshold\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state.changeStage = this.changeStage.bind(this);\r\n        this.state.changeThreshold = this.changeThreshold.bind(this);\r\n    }\r\n\r\n    changeStage(stage) {\r\n        this.setState({\r\n            stage\r\n        });\r\n    }\r\n\r\n    changeThreshold(threshold) {\r\n        this.setState({\r\n            threshold\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <AppContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </AppContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nAppContext.Controller = Controller;\r\n\r\nexport default AppContext;","class MicrophoneService {\r\n    audioContext = null;\r\n    inputDevice = null;\r\n    \r\n    listeners = {};\r\n    \r\n    error = false;\r\n    \r\n    volume = 0;\r\n    \r\n    /**\r\n     * Emits an event to all listeners\r\n     * @param {string} type \r\n     * @param {*} data \r\n     */\r\n    emit(type, data = null) {\r\n        if (!this.listeners[type]) {\r\n            return;\r\n        }\r\n\r\n        this.listeners[type].forEach(listener => {\r\n            if (typeof listener !== 'function') {\r\n                return;\r\n            }\r\n\r\n            listener(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new event listener\r\n     * @param {string} type \r\n     * @param {function} callback \r\n     */\r\n    on(type, callback) {\r\n        if (!this.listeners[type]) {\r\n            this.listeners[type] = [];\r\n        }\r\n\r\n        this.listeners[type].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener\r\n     * @param {string} type \r\n     * @param {function} callback \r\n     */\r\n    removeListener(type, callback) {\r\n        if (!this.listeners[type]) {\r\n            return;\r\n        }\r\n\r\n        const index = this.listeners[type].findIndex(listener => listener === callback);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this.listeners[type].splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Prepares the service APIs to use\r\n     */\r\n    init() {\r\n        this.audioContext = new AudioContext();\r\n\r\n        navigator.getUserMedia = navigator.getUserMedia\r\n            || navigator.webkitGetUserMedia\r\n            || navigator.mozGetUserMedia\r\n            || navigator.msGetUserMedia;\r\n\r\n        if (!navigator.getUserMedia) {\r\n            this.error = true;\r\n            throw new Error('UserMedia API not available!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a list of available input devices\r\n     * @returns {Promise<array>}\r\n     */\r\n    getAvailableInputDevices() {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then((devices) => {\r\n                    resolve(devices.filter((d) => d.kind === 'audioinput'))\r\n                })\r\n                .catch(reject)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Selects a device to listen\r\n     * @param {string} deviceId \r\n     */\r\n    selectDevice(deviceId) {\r\n        this.inputDevice = deviceId;\r\n    }\r\n\r\n    /**\r\n     * Initialises the listening cycle for microphone\r\n     */\r\n    listen() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.inputDevice) {\r\n                reject('No device selected!');\r\n            }\r\n    \r\n            const userMediaOptions = {\r\n                audio: {\r\n                    deviceId: this.inputDevice\r\n                }\r\n            }\r\n    \r\n            navigator.getUserMedia(\r\n                userMediaOptions,\r\n                (stream) => {\r\n                    this.initialiseMicrophoneServices(stream);\r\n                    resolve();\r\n                },\r\n                (e) => {\r\n                    reject(e);\r\n                }\r\n            );\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initialises microphone processors \r\n     * @param {*} stream \r\n     */\r\n    initialiseMicrophoneServices(stream) {\r\n        const microphone = this.audioContext.createMediaStreamSource(stream);\r\n\r\n        const meter = this.createAudioMeter(this.audioContext);\r\n        microphone.connect(meter);\r\n    }\r\n\r\n    /**\r\n     * Creates audio processor and initialises callbacks\r\n     * @param {AudioContext} audioContext \r\n     * @param {number} clipLevel \r\n     * @param {number} averaging \r\n     * @param {number} clipLag \r\n     */\r\n    createAudioMeter(audioContext, clipLevel = 0.98, averaging = 0.95, clipLag = 750) {\r\n        const processor = audioContext.createScriptProcessor(512);\r\n        processor.onaudioprocess = (e) => {\r\n            // volume audio process updates listening parameters\r\n            this.volumeAudioProcess(e, processor);\r\n            this.onAudioProcess(e, processor);\r\n        };\r\n\r\n        processor.clipping = false;\r\n        processor.lastClip = 0;\r\n        processor.volume = 0;\r\n        processor.clipLevel = clipLevel;\r\n        processor.averaging = averaging;\r\n        processor.clipLag = clipLag;\r\n\r\n        // this will have no effect, since we don't copy the input to the output,\r\n        // but works around a current Chrome bug.\r\n        processor.connect(audioContext.destination);\r\n\r\n        processor.checkClipping = function () {\r\n            if (!this.clipping) {\r\n                return false;\r\n            }\r\n\r\n            if ((this.lastClip + this.clipLag) < window.performance.now()) {\r\n                this.clipping = false;\r\n            }\r\n\r\n            return this.clipping;\r\n        };\r\n\r\n        processor.shutdown = function () {\r\n            this.disconnect();\r\n            this.onaudioprocess = null;\r\n        };\r\n\r\n        return processor;\r\n    }\r\n\r\n    /**\r\n     * Audio processing handle\r\n     * @param {AudioProcessingEvent} event \r\n     * @param {ScriptProcessorNode} processor \r\n     */\r\n    onAudioProcess(event, processor) {\r\n        this.emit('audio-process', { event, processor })\r\n    }\r\n\r\n    /**\r\n     * Volume Audio Processor - calculates microphone volume\r\n     * Only Audio Processor that is actually required to run\r\n     * @param {AudioProcessingEvent} event \r\n     * @param {ScriptProcessorNode} processor \r\n     */\r\n    volumeAudioProcess(event, processor) {\r\n        let buf = event.inputBuffer.getChannelData(0);\r\n        let bufLength = buf.length;\r\n        let sum = 0;\r\n        let x;\r\n\r\n        // Do a root-mean-square on the samples: sum up the squares...\r\n        for (let i = 0; i < bufLength; i++) {\r\n            x = buf[i];\r\n            if (Math.abs(x) >= processor.clipLevel) {\r\n                processor.clipping = true;\r\n                processor.lastClip = window.performance.now();\r\n            }\r\n\r\n            sum += x * x;\r\n        }\r\n\r\n        // ... then take the square root of the sum.\r\n        var rms = Math.sqrt(sum / bufLength);\r\n\r\n        // Now smooth this out with the averaging factor applied\r\n        // to the previous sample - take the max here because we\r\n        // want \"fast attack, slow release.\"\r\n        const volume = Math.max(rms, processor.volume * processor.averaging);\r\n\r\n        if (processor.volume !== volume) {\r\n            processor.volume = volume;\r\n            const volumePercentage = Math.min(Math.round(100 * volume), 100)\r\n\r\n            if (volumePercentage !== this.volume) {\r\n                this.volume = volumePercentage;\r\n    \r\n                this.emit('volume-change', this.volume);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new MicrophoneService();","import React from 'react';\r\nimport './VolumeDisplay.css';\r\n\r\nfunction VolumeDisplay({ volume, peak, threshold }) {\r\n    return (\r\n        <div className=\"volume-display\">\r\n            <div className=\"bar\" style={{ width: `${volume}%`}} />\r\n            {peak && <div className=\"peak-indicator\" />}\r\n            {threshold && <div className=\"threshold-indicator\" style={{ width: `${threshold}%`}} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VolumeDisplay;","import React from 'react';\r\nimport MicrophoneService from '../services/MicrophoneService';\r\n\r\nclass InputDeviceSelector extends React.Component {\r\n    state = {\r\n        availableDevices: [],\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const availableDevices = await MicrophoneService.getAvailableInputDevices();\r\n\r\n        this.setState({\r\n            availableDevices\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select value={this.props.value} onChange={this.props.onChange}>\r\n                <option value={null}>Select...</option>\r\n                {this.state.availableDevices.map((device, index) => {\r\n                    return <option \r\n                        value={device.deviceId}\r\n                        key={device.deviceId}\r\n                    >{device.label || `Unknown device #${index + 1}`}</option>\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputDeviceSelector;","import React from 'react';\r\nimport './Stage.css';\r\n\r\nfunction Stage({ children, id }) {\r\n    return (\r\n        <div className=\"stage-wrapper\" id={`stage-${id}`}>\r\n            <div className=\"stage-inner\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stage;","import React from 'react';\r\nimport MicrophoneService from '../../services/MicrophoneService';\r\nimport VolumeDisplay from '../VolumeDisplay';\r\nimport InputDeviceSelector from '../InputDeviceSelector';\r\nimport { stages } from '../../contexts/AppContext';\r\nimport Stage from './Stage';\r\n\r\nimport './Privileges.css';\r\n\r\nclass Privileges extends React.Component {\r\n    state = {\r\n        error: false,\r\n        goodToProceed: false,\r\n        clickedStart: false,\r\n        selectedDevice: '',\r\n        volume: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        if (MicrophoneService.error) {\r\n            console.error('MicrophoneService failed to load');\r\n\r\n            this.setState({\r\n                error: true\r\n            });\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        try {\r\n            MicrophoneService.init();\r\n\r\n            const devices = await MicrophoneService.getAvailableInputDevices();\r\n    \r\n            if (!devices || !devices.length) {\r\n                console.log('No devices found!');\r\n\r\n                return this.setState({\r\n                    error: true\r\n                });\r\n            }\r\n    \r\n            MicrophoneService.selectDevice(this.state.selectedDevice);\r\n            MicrophoneService.on('volume-change', this.handleVolumeChange);\r\n            \r\n            await MicrophoneService.listen();\r\n\r\n            this.setState({\r\n                goodToProceed: true\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n\r\n            this.setState({\r\n                error: true\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MicrophoneService.removeListener('volume-change', this.handleVolumeChange);\r\n    }\r\n\r\n    handleVolumeChange(volume) {\r\n        this.setState({\r\n            volume\r\n        });\r\n    }\r\n\r\n    handleClickedStart() {\r\n        this.setState({\r\n            clickedStart: true\r\n        });\r\n\r\n        this.init();\r\n    }\r\n\r\n    handleProceed() {\r\n        this.props.changeStage(stages.STAGE_CALIBRATION);\r\n    }\r\n\r\n    handleDeviceChange(e) {\r\n        const value = e.target.value;\r\n\r\n        this.setState({\r\n            selectedDevice: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage id=\"privileges\">\r\n                {this.state.error ? (\r\n                    <div className=\"error\">\r\n                        <p>An error occured.</p> \r\n                        <p>Looks like your browser doesn't support our core features (or you didn't grant us access).</p>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        {this.state.goodToProceed ? (\r\n                            <div className=\"current-read\">\r\n                                <h2>Current microphone read:</h2>\r\n                                <VolumeDisplay volume={this.state.volume} />\r\n                                <h4>All good?</h4>\r\n                                <p>\r\n                                    (If not, it might be worth reloading the page and picking a different device)\r\n                                </p>\r\n                                <button \r\n                                    onClick={this.handleProceed.bind(this)}\r\n                                    className=\"btn\"\r\n                                >PROCEED</button>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"access-request\">\r\n                                {this.state.clickedStart ? (\r\n                                    <>\r\n                                        <p>Waiting for access to microphone...</p>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n\r\n                                        <h4>\r\n                                            We need access to your microphone <i>(duh...)</i>\r\n                                        </h4>\r\n                                        {this.state.selectedDevice ? (\r\n                                            <>\r\n                                                <p>Now click the button below to start.</p>\r\n                                                <p>\r\n                                                    <button\r\n                                                        onClick={this.handleClickedStart.bind(this)}\r\n                                                        className=\"btn\"    \r\n                                                    >\r\n                                                        START\r\n                                                    </button>\r\n                                                </p>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <p>First, please select the microphone you'd like to use:</p>\r\n                                                <InputDeviceSelector\r\n                                                    value={this.state.selectedDevice}\r\n                                                    onChange={this.handleDeviceChange.bind(this)}\r\n                                                />\r\n                                            </>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </Stage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Privileges;","import React from 'react';\r\nimport Stage from './Stage';\r\nimport VolumeDisplay from '../VolumeDisplay';\r\nimport MicrophoneService from '../../services/MicrophoneService';\r\nimport './Calibration.css';\r\nimport AppContext, { stages } from '../../contexts/AppContext';\r\n\r\n// todo: move somewhere global\r\nconst captureModes = {\r\n    STANDBY: 'standby',\r\n    LISTENING: 'listening'\r\n}\r\n\r\nclass Calibration extends React.Component {\r\n    static contextType = AppContext;\r\n\r\n    state = {\r\n        volume: MicrophoneService.volume,\r\n        threshold: 45,\r\n        captureMode: captureModes.STANDBY,\r\n        recentCapturedSample: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n        this.handleThresholdChange = this.handleThresholdChange.bind(this);\r\n        this.handleAudioProcess = this.handleAudioProcess.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initMicrophoneService();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MicrophoneService.removeListener('volume-change', this.handleVolumeChange);\r\n        MicrophoneService.removeListener('audio-process', this.handleAudioProcess);\r\n    }\r\n\r\n    initMicrophoneService() {\r\n        MicrophoneService.on('volume-change', this.handleVolumeChange);\r\n        MicrophoneService.on('audio-process', this.handleAudioProcess);\r\n    }\r\n\r\n    handleVolumeChange(volume) {\r\n        this.setState({\r\n            volume \r\n        });\r\n    }\r\n\r\n    handleAudioProcess({ event, processor }) {\r\n        if (MicrophoneService.volume >= this.state.threshold) {\r\n            if (this.state.captureMode === captureModes.STANDBY) {\r\n                const read = Array.from(event.inputBuffer.getChannelData(0));\r\n\r\n                this.setState({\r\n                    captureMode: captureModes.LISTENING,\r\n                    recentCapturedSample: read\r\n                });\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.state.captureMode === captureModes.LISTENING) {\r\n            this.setState({\r\n                captureMode: captureModes.STANDBY,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleThresholdChange(e) {\r\n        this.setState({\r\n            threshold: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        // set current threshold in global context\r\n        this.context.changeThreshold(this.state.threshold);\r\n        this.context.changeStage(stages.STAGE_TIMER);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage id=\"calibration\">\r\n                <h2>\r\n                    Let's pick the right sound\r\n                </h2>\r\n                <h3>Before we start, we need to set threshold right</h3>\r\n                <p>Try placing a few shots and adjusting the value below to make sure I pick up shots only.</p>\r\n                <p>Also, for best results, keep your phone exactly where you'll have it during shooting.</p>\r\n                <div className=\"threshold-regulation\">\r\n                    <div className=\"threshold-range-input\">\r\n                        <input \r\n                            type=\"range\" \r\n                            min=\"0\"\r\n                            max=\"100\"\r\n                            step=\"1\"\r\n                            value={this.state.threshold} \r\n                            onChange={this.handleThresholdChange}\r\n                        />\r\n                    </div>\r\n                    <VolumeDisplay \r\n                        volume={this.state.volume} \r\n                        threshold={this.state.threshold}\r\n                    />\r\n                </div>\r\n                {this.state.recentCapturedSample && (\r\n                    <>\r\n                        <p>If it looks right, let's continue to the interesting part!</p>\r\n                        <button className=\"btn\" onClick={this.handleSubmit.bind(this)}>CONTINUE</button>\r\n                    </>\r\n                )}\r\n            </Stage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calibration;","import React from 'react';\r\nimport './TimerDisplay.css';\r\n\r\nfunction formatNumber(value) {\r\n    const toFloat = value / 1000;\r\n    const twoLast = parseFloat((toFloat - Math.floor(toFloat)).toFixed(2)) * 1000;\r\n    const mainPart = Math.floor(toFloat);\r\n\r\n    return String(mainPart).padStart(2, '0') + ':' + String(twoLast).substr(0, 2);\r\n}\r\n\r\nfunction TimerDisplay({ value }) {\r\n    return (\r\n        <div className=\"timer-display\">\r\n            <span>\r\n                {value ? formatNumber(value) : '--:--'}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerDisplay;","import React from 'react';\r\n\r\nfunction TimerButtons({ mode, modes, onStartButtonClick, onStopButtonClick }) {\r\n    return (\r\n        <div className=\"timer-buttons\">\r\n            {mode === modes.OFF && <button onClick={onStartButtonClick}>START</button>}\r\n            {mode === modes.STANDBY && <button disabled>STANDBY</button>}\r\n            {mode === modes.ON && <button onClick={onStopButtonClick}>STOP</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerButtons;","// todo: import constants\r\n\r\nclass Beeper {\r\n    static states = {\r\n        BEEPER_STANDBY: 'standby',\r\n        BEEPER_PLAYING: 'playing'\r\n    }\r\n    \r\n    /**\r\n     * @type {AudioContext|null}\r\n     */\r\n    audioContext = null;\r\n    /**\r\n     * @type {OscillatorNode|null}\r\n     */\r\n    oscillator = null;\r\n\r\n    /**\r\n     * @type {Beeper.states}\r\n     */\r\n    state = Beeper.states.BEEPER_STANDBY;\r\n\r\n    frequency = 3000;\r\n    duration = 200;\r\n\r\n    /**\r\n     * Creates beeper object\r\n     * @param {*} frequency - beep frequency\r\n     * @param {*} duration - beep duration\r\n     */\r\n    constructor() {\r\n        this.audioContext = new AudioContext();\r\n\r\n        this.prepareOscillator();\r\n    }\r\n\r\n    /**\r\n     * Prepares the oscillator\r\n     */\r\n    prepareOscillator() {\r\n        this.oscillator = this.audioContext.createOscillator()\r\n\r\n        this.oscillator.type = 'square';\r\n        this.oscillator.frequency.value = this.frequency;\r\n        this.oscillator.connect(this.audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * plays the sound\r\n     * @returns {Promise<void|string>}\r\n     */\r\n    play() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.state === Beeper.states.BEEPER_PLAYING) {\r\n                reject('Beeper is already playing');\r\n            }\r\n    \r\n            this.oscillator.start();\r\n            this.state = Beeper.states.BEEPER_PLAYING;\r\n\r\n            setTimeout(() => { \r\n                this.oscillator.stop();\r\n                resolve();\r\n                this.state = Beeper.states.BEEPER_STANDBY;\r\n                this.prepareOscillator(); \r\n            }, this.duration);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Beeper;","import React from 'react';\r\n\r\nfunction TimerShotsList({ startTimestamp, shots }) {\r\n    if (!startTimestamp || shots.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer-shots-list\">\r\n            <ul>\r\n                {shots.map(shot => {\r\n                    return <li>{shot - startTimestamp}</li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerShotsList;","import React from 'react';\r\nimport Stage from './Stage';\r\nimport './Timer.css';\r\n\r\nimport TimerDisplay from './Timer/TimerDisplay';\r\nimport TimerButtons from './Timer/TimerButtons';\r\n\r\nimport Beeper from '../../services/Beeper';\r\nimport MicrophoneService from '../../services/MicrophoneService';\r\nimport AppContext from '../../contexts/AppContext';\r\nimport TimerShotsList from './Timer/TimerShotsList';\r\n\r\nexport const modes = {\r\n    OFF: 'off', // excercise has not started yet\r\n    STANDBY: 'standby', // button has been pressed, waiting for the buzzer\r\n    ON: 'on' // registering shots\r\n}\r\n\r\nconst captureModes = {\r\n    STANDBY: 'standby', // waiting to go over threshold\r\n    LISTENING: 'listening' // current soundwave is over volume threshold\r\n}\r\n\r\nclass Timer extends React.Component {\r\n    static contextType = AppContext;\r\n\r\n    state = {\r\n        mode: modes.OFF,\r\n        captureMode: captureModes.STANDBY,\r\n        shots: [],\r\n    }\r\n\r\n    beeper = new Beeper();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleStartButton = this.handleStartButton.bind(this);\r\n        this.handleStopButton = this.handleStopButton.bind(this);\r\n        this.startExcercise = this.startExcercise.bind(this);\r\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initMicrophoneService();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MicrophoneService.removeListener('volume-change', this.handleVolumeChange);\r\n    }\r\n\r\n    initMicrophoneService() {\r\n        MicrophoneService.on('volume-change', this.handleVolumeChange);\r\n    }\r\n\r\n    handleVolumeChange(volume) {\r\n        if (this.state.mode !== modes.ON) {\r\n            return;\r\n        }\r\n\r\n        if (volume < this.context.threshold) {\r\n            if (this.state.captureMode === captureModes.LISTENING) {\r\n                this.setState({\r\n                    captureMode: captureModes.STANDBY\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.state.captureMode === captureModes.STANDBY) {\r\n            this.setState({\r\n                captureMode: captureModes.LISTENING,\r\n                shots: [\r\n                    ...this.state.shots,\r\n                    (new Date()).getTime()\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    handleStartButton() {\r\n        this.setState({\r\n            mode: modes.STANDBY,\r\n            shots: [],\r\n        });\r\n\r\n        setTimeout(this.startExcercise, 2000);\r\n    }\r\n\r\n    startExcercise() {\r\n        this.beeper.play();\r\n\r\n        // avoid catching the beeper as a sample\r\n        setTimeout(() => {\r\n            this.setState({\r\n                mode: modes.ON,\r\n                startTimestamp: (new Date()).getTime() - (this.beeper.duration + 50),\r\n            });\r\n        }, this.beeper.duration + 50);\r\n    }\r\n\r\n    handleStopButton() {\r\n        this.setState({\r\n            mode: modes.OFF\r\n        });\r\n    }\r\n\r\n    getLastShotDelta() {\r\n        const { shots, startTimestamp } = this.state;\r\n\r\n        if (shots.length === 0 || !startTimestamp) {\r\n            return null;\r\n        }\r\n\r\n        const lastShot = shots[shots.length - 1];\r\n\r\n        return lastShot - startTimestamp;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage id=\"timer\">\r\n                <TimerDisplay\r\n                    value={this.getLastShotDelta()}\r\n                />\r\n                <TimerShotsList\r\n                    startTimestamp={this.state.startTimestamp}\r\n                    shots={this.state.shots}\r\n                />\r\n                <TimerButtons\r\n                    modes={modes}\r\n                    mode={this.state.mode}\r\n                    onStartButtonClick={this.handleStartButton}\r\n                    onStopButtonClick={this.handleStopButton}\r\n                />\r\n            </Stage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport AppContext, { stages } from '../contexts/AppContext';\r\nimport Privileges from './stages/Privileges';\r\nimport Calibration from './stages/Calibration';\r\nimport Timer from './stages/Timer';\r\n\r\nconst stageMap = {\r\n    [stages.STAGE_CALIBRATION]: Calibration,\r\n    [stages.STAGE_PRIVILEGES]: Privileges,\r\n    [stages.STAGE_TIMER]: Timer\r\n}\r\n\r\nclass Router extends React.Component {\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {(context) => React.createElement(stageMap[context.stage], context)}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport './App.css';\nimport Router from './Router';\nimport AppContext from '../contexts/AppContext';\n\nclass App extends React.Component {\n  render() {\n    return (\n        <AppContext.Controller>\n          <div className=\"App\">\n            <div id=\"main\">\n              <Router />\n            </div>\n          </div>\n        </AppContext.Controller>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}